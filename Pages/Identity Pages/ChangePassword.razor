@* @page "/ChangePassword"
@using MudBlazor
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.Security.Principal

<link href="css/custom.css" rel="stylesheet" />

<PageTitle>Change Password</PageTitle>

<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-5">
                <MudText Typo="Typo.subtitle2" Class="mb-5" >Change Password</MudText>
                <div style="display: flex; align-items: center;">
                    <div style="flex:  1;">
                        <div style="display: flex; align-items: center;">
                            <MudTextField Label="Current Password" @bind-Value="currentPassword" Required="true" InputType="@(currentPasswordVisibility ? InputType.Text : InputType.Password)" />
                            <MudIconButton Icon="@(currentPasswordVisibility ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                           Size="Size.Small" Color="Color.Primary" OnClick="@(() => TogglePasswordVisibility("currentPassword"))" Class="mt-2" />
                        </div>
                        <div style="display: flex; align-items: center;">
                            <MudTextField Label="New Password" @bind-Value="newPassword" Required="true" InputType="@(newPasswordVisibility ? InputType.Text : InputType.Password)" />
                            <MudIconButton Icon="@(newPasswordVisibility ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                           Size="Size.Small" Color="Color.Primary" OnClick="@(() => TogglePasswordVisibility("newPassword"))" Class="mt-2" />
                        </div>
                        <div style="display: flex; align-items: center;">
                            <MudTextField Label="Confirm New Password" @bind-Value="confirmNewPassword" Required="true" InputType="@(confirmNewPasswordVisibility ? InputType.Text : InputType.Password)" />
                            <MudIconButton Icon="@(confirmNewPasswordVisibility ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                           Size="Size.Small" Color="Color.Primary" OnClick="@(() => TogglePasswordVisibility("confirmNewPassword"))" Class="mt-2" />
                        </div>
                    </div>
                    <!-- Password Visibility Toggle -->
                    
                </div>
                <br />
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <MudButton Color="Color.Error" OnClick="CancelChangePasswordAsync">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="ChangePasswordMethodAsync">Confirm</MudButton>
                </div>
                
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudSnackbar />
</MudContainer>

@code {
    private string currentPassword;
    private string newPassword;
    private string confirmNewPassword;
    // private string PasswordVisibilityIcon => passwordVisibility ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    // private bool passwordVisibility = false; // To track password visibility state
    // private InputType PasswordInputType => passwordVisibility ? InputType.Text : InputType.Password;
    private bool currentPasswordVisibility = false;
    private bool newPasswordVisibility = false;
    private bool confirmNewPasswordVisibility = false;

    private async Task ChangePasswordMethodAsync()
    {

        try
        {
            // Change the password
            var user = UserManager.GetUserAsync(SignInManager.Context.User).Result;
            var result = UserManager.ChangePasswordAsync(user, currentPassword, newPassword).Result;

            if (result.Succeeded)
            {
                ShowSnackbar("Password changed successfully. Redirecting to Profile...", Severity.Success);
                NavigationManager.NavigateTo("/Profile");
            }
            else if (result.Errors.Any(e => e.Code == "PasswordMismatch"))
            {
                ShowSnackbar("Current password is incorrect. Please try again.", Severity.Error);
            }
            else if (newPassword != confirmNewPassword)
            {
                ShowSnackbar("New password and confirmation do not match. Please try again.", Severity.Error);
            }
            else
            {
                ShowSnackbar("An error occurred while changing the password. Please try again.", Severity.Error);
            }
            // clear the password fields for new attempt
            currentPassword = string.Empty;
            newPassword = string.Empty;
            confirmNewPassword = string.Empty;
            
        }
        catch (Exception ex)
        {
            ShowSnackbar("An error occurred while changing the password. Please try again.", Severity.Error);
        }
        // clear the password fields for new attempt
        currentPassword = string.Empty;
        newPassword = string.Empty;
        confirmNewPassword = string.Empty;
    
    }

    private void CancelChangePasswordAsync()
    {
        NavigationManager.NavigateTo("/Profile");
    }

    private void ShowSnackbar(string message, Severity severity)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add(message, severity);
    }
    private void TogglePasswordVisibility(string fieldName)
    {
        switch (fieldName)
        {
            case "currentPassword":
                currentPasswordVisibility = !currentPasswordVisibility;
                break;
            case "newPassword":
                newPasswordVisibility = !newPasswordVisibility;
                break;
            case "confirmNewPassword":
                confirmNewPasswordVisibility = !confirmNewPasswordVisibility;
                break;
        }
    }
} *@